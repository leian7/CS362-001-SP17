/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 09:37:38 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "n\n", "n\n");
      calDay0.addAppt(appt0);
      Appt appt1 = new Appt(14, 14, 1, 1, 1, "n\n", "\t --- 1/14/2014 --- \n --- -------- Appointments ------------ --- \n\n");
      calDay0.addAppt(appt1);
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(14, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2273, 2273, 2273);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      boolean boolean0 = calDay0.isValid();
      assertEquals(7, calDay0.getMonth());
      assertTrue(boolean0);
      assertEquals(2468, calDay0.getYear());
      assertEquals(20, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1046, 1046, (-1789));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      int int0 = calDay0.getYear();
      assertEquals(1128, int0);
      assertEquals(6, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(3, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-2896);
      int int0 = calDay0.getYear();
      assertEquals((-2896), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "\n", "\n");
      calDay0.addAppt(appt0);
      calDay0.getSizeAppts();
      assertEquals(2014, calDay0.getYear());
      assertEquals(14, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3629, 3629, 3629, 581, (-482));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      int int0 = calDay0.getMonth();
      assertEquals(4, int0);
      assertTrue(calDay0.isValid());
      assertEquals(30, calDay0.getDay());
      assertEquals(3941, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = (-796);
      int int0 = calDay0.getMonth();
      assertEquals((-796), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.day = 392;
      int int0 = calDay0.getDay();
      assertEquals(392, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.day = (-1004);
      int int0 = calDay0.getDay();
      assertEquals((-1004), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      LinkedList<Appt> linkedList1 = calDay0.getAppts();
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "+", "+");
      calDay0.addAppt(appt0);
      calDay0.getAppts();
      assertEquals(14, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.addAppt((Appt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1913), 271, 655, (-1913), 1745);
      mockGregorianCalendar0.set(0, 271);
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      boolean boolean0 = calDay0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "n\n", "n\n");
      calDay0.addAppt(appt0);
      String string0 = calDay0.toString();
      assertEquals("\t --- 1/14/2014 --- \n --- -------- Appointments ------------ --- \n\t1/14/14 at 1:14am ,n\n, n\n\n \n", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      String string0 = calDay0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Iterator<?> iterator0 = calDay0.iterator();
      assertEquals(1, calDay0.getMonth());
      assertEquals(14, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Iterator<?> iterator0 = calDay0.iterator();
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "n\n", "n\n");
      Appt appt1 = new Appt(14, 14, 1, 1, 1, "n\n", "\t --- 1/14/2014 --- \n --- -------- Appointments ------------ --- \n\n");
      calDay0.addAppt(appt1);
      calDay0.addAppt(appt0);
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(14, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      calDay0.getSizeAppts();
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(14, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay(gregorianCalendar0);
      Appt appt0 = new Appt(1, 14, 14, 1, 14, "n\n", "n\n");
      calDay0.addAppt(appt0);
      calDay0.addAppt(appt0);
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(14, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt((-1), (-1), 392, (-690), (-690), "NU}E", "JoBP{}O3`n");
      calDay0.addAppt(appt0);
      assertFalse(calDay0.isValid());
  }
}
