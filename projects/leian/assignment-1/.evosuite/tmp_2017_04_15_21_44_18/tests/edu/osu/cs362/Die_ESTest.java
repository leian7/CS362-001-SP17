/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 16 04:46:01 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Die;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Die_ESTest extends Die_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die(1165);
      boolean boolean0 = die1.equals(die0);
      assertEquals(1165, die1.getNumSides());
      assertFalse(die0.equals((Object)die1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Die die0 = new Die(2937, 2937);
      Die die1 = new Die();
      boolean boolean0 = die0.equals(die1);
      assertFalse(boolean0);
      assertEquals(6, die1.getNumSides());
      assertEquals(2937, die0.getNumSides());
      assertEquals(2937, die0.getResult());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Die die0 = new Die();
      Random.setNextRandom(4715);
      int int0 = die0.roll();
      assertEquals(6, die0.getResult());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Die die0 = new Die(1546, 1);
      assertEquals(1, die0.getResult());
      assertEquals(1546, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die();
      boolean boolean0 = die1.equals(die0);
      assertEquals(6, die1.getNumSides());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Die die0 = new Die();
      boolean boolean0 = die0.equals(die0);
      assertEquals(6, die0.getNumSides());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Die die0 = new Die();
      int int0 = die0.roll();
      assertEquals(6, die0.getNumSides());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Die die0 = new Die();
      die0.getResult();
      assertEquals(6, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Die die0 = new Die();
      int int0 = die0.getNumSides();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die(2924, 2924);
      boolean boolean0 = die0.equals(die1);
      assertEquals(2924, die1.getResult());
      assertEquals(2924, die1.getNumSides());
      assertEquals(6, die0.getNumSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Die die0 = new Die();
      boolean boolean0 = die0.equals("");
      assertEquals(6, die0.getNumSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die(2013);
      boolean boolean0 = die0.equals(die1);
      assertEquals(2013, die1.getNumSides());
      assertFalse(boolean0);
      assertFalse(die1.equals((Object)die0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Die die0 = new Die();
      String[] stringArray0 = new String[1];
      boolean boolean0 = die0.equals(stringArray0[0]);
      assertEquals(6, die0.getNumSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(6, 4715);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(582, (-2383));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die((-17), (-17));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die((-3831));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition: numSides = -3831numSides must be greater than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Die.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Die die0 = new Die();
      String string0 = die0.toString();
      assertEquals("Num sides 6 result 1", string0);
  }
}
